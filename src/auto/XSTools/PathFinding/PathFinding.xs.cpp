/*
 * This file was generated automatically by ExtUtils::ParseXS version 3.28 from the
 * contents of PathFinding.xs. Do not edit this file, edit PathFinding.xs instead.
 *
 *    ANY CHANGES MADE HERE WILL BE LOST!
 *
 */

#line 1 "src/auto/XSTools/PathFinding/PathFinding.xs"
#include <stdlib.h>
#include "EXTERN.h"
#include "perl.h"
#include "XSUB.h"

#include "algorithm.h"
typedef CalcPath_session * PathFinding;


/* Convenience function for checking whether pv is a reference, and dereference it if necessary */
static inline SV *
derefPV (SV *pv)
{
	if (SvTYPE (pv) == SVt_RV) {
		return SvRV (pv);
	} else
		return pv;
}


#line 31 "src/auto/XSTools/PathFinding/PathFinding.c"
#ifndef PERL_UNUSED_VAR
#  define PERL_UNUSED_VAR(var) if (0) var = var
#endif

#ifndef dVAR
#  define dVAR		dNOOP
#endif


/* This stuff is not part of the API! You have been warned. */
#ifndef PERL_VERSION_DECIMAL
#  define PERL_VERSION_DECIMAL(r,v,s) (r*1000000 + v*1000 + s)
#endif
#ifndef PERL_DECIMAL_VERSION
#  define PERL_DECIMAL_VERSION \
	  PERL_VERSION_DECIMAL(PERL_REVISION,PERL_VERSION,PERL_SUBVERSION)
#endif
#ifndef PERL_VERSION_GE
#  define PERL_VERSION_GE(r,v,s) \
	  (PERL_DECIMAL_VERSION >= PERL_VERSION_DECIMAL(r,v,s))
#endif
#ifndef PERL_VERSION_LE
#  define PERL_VERSION_LE(r,v,s) \
	  (PERL_DECIMAL_VERSION <= PERL_VERSION_DECIMAL(r,v,s))
#endif

/* XS_INTERNAL is the explicit static-linkage variant of the default
 * XS macro.
 *
 * XS_EXTERNAL is the same as XS_INTERNAL except it does not include
 * "STATIC", ie. it exports XSUB symbols. You probably don't want that
 * for anything but the BOOT XSUB.
 *
 * See XSUB.h in core!
 */


/* TODO: This might be compatible further back than 5.10.0. */
#if PERL_VERSION_GE(5, 10, 0) && PERL_VERSION_LE(5, 15, 1)
#  undef XS_EXTERNAL
#  undef XS_INTERNAL
#  if defined(__CYGWIN__) && defined(USE_DYNAMIC_LOADING)
#    define XS_EXTERNAL(name) __declspec(dllexport) XSPROTO(name)
#    define XS_INTERNAL(name) STATIC XSPROTO(name)
#  endif
#  if defined(__SYMBIAN32__)
#    define XS_EXTERNAL(name) EXPORT_C XSPROTO(name)
#    define XS_INTERNAL(name) EXPORT_C STATIC XSPROTO(name)
#  endif
#  ifndef XS_EXTERNAL
#    if defined(HASATTRIBUTE_UNUSED) && !defined(__cplusplus)
#      define XS_EXTERNAL(name) void name(pTHX_ CV* cv __attribute__unused__)
#      define XS_INTERNAL(name) STATIC void name(pTHX_ CV* cv __attribute__unused__)
#    else
#      ifdef __cplusplus
#        define XS_EXTERNAL(name) extern "C" XSPROTO(name)
#        define XS_INTERNAL(name) static XSPROTO(name)
#      else
#        define XS_EXTERNAL(name) XSPROTO(name)
#        define XS_INTERNAL(name) STATIC XSPROTO(name)
#      endif
#    endif
#  endif
#endif

/* perl >= 5.10.0 && perl <= 5.15.1 */


/* The XS_EXTERNAL macro is used for functions that must not be static
 * like the boot XSUB of a module. If perl didn't have an XS_EXTERNAL
 * macro defined, the best we can do is assume XS is the same.
 * Dito for XS_INTERNAL.
 */
#ifndef XS_EXTERNAL
#  define XS_EXTERNAL(name) XS(name)
#endif
#ifndef XS_INTERNAL
#  define XS_INTERNAL(name) XS(name)
#endif

/* Now, finally, after all this mess, we want an ExtUtils::ParseXS
 * internal macro that we're free to redefine for varying linkage due
 * to the EXPORT_XSUB_SYMBOLS XS keyword. This is internal, use
 * XS_EXTERNAL(name) or XS_INTERNAL(name) in your code if you need to!
 */

#undef XS_EUPXS
#if defined(PERL_EUPXS_ALWAYS_EXPORT)
#  define XS_EUPXS(name) XS_EXTERNAL(name)
#else
   /* default to internal */
#  define XS_EUPXS(name) XS_INTERNAL(name)
#endif

#ifndef PERL_ARGS_ASSERT_CROAK_XS_USAGE
#define PERL_ARGS_ASSERT_CROAK_XS_USAGE assert(cv); assert(params)

/* prototype to pass -Wmissing-prototypes */
STATIC void
S_croak_xs_usage(const CV *const cv, const char *const params);

STATIC void
S_croak_xs_usage(const CV *const cv, const char *const params)
{
    const GV *const gv = CvGV(cv);

    PERL_ARGS_ASSERT_CROAK_XS_USAGE;

    if (gv) {
        const char *const gvname = GvNAME(gv);
        const HV *const stash = GvSTASH(gv);
        const char *const hvname = stash ? HvNAME(stash) : NULL;

        if (hvname)
	    Perl_croak_nocontext("Usage: %s::%s(%s)", hvname, gvname, params);
        else
	    Perl_croak_nocontext("Usage: %s(%s)", gvname, params);
    } else {
        /* Pants. I don't think that it should be possible to get here. */
	Perl_croak_nocontext("Usage: CODE(0x%"UVxf")(%s)", PTR2UV(cv), params);
    }
}
#undef  PERL_ARGS_ASSERT_CROAK_XS_USAGE

#define croak_xs_usage        S_croak_xs_usage

#endif

/* NOTE: the prototype of newXSproto() is different in versions of perls,
 * so we define a portable version of newXSproto()
 */
#ifdef newXS_flags
#define newXSproto_portable(name, c_impl, file, proto) newXS_flags(name, c_impl, file, proto, 0)
#else
#define newXSproto_portable(name, c_impl, file, proto) (PL_Sv=(SV*)newXS(name, c_impl, file), sv_setpv(PL_Sv, proto), (CV*)PL_Sv)
#endif /* !defined(newXS_flags) */

#if PERL_VERSION_LE(5, 21, 5)
#  define newXS_deffile(a,b) Perl_newXS(aTHX_ a,b,file)
#else
#  define newXS_deffile(a,b) Perl_newXS_deffile(aTHX_ a,b)
#endif

#line 175 "src/auto/XSTools/PathFinding/PathFinding.c"

XS_EUPXS(XS_PathFinding_create); /* prototype to pass -Wmissing-prototypes */
XS_EUPXS(XS_PathFinding_create)
{
    dVAR; dXSARGS;
    if (items != 0)
       croak_xs_usage(cv,  "");
    {
	PathFinding	RETVAL;
#line 29 "src/auto/XSTools/PathFinding/PathFinding.xs"
		RETVAL = CalcPath_new ();
#line 187 "src/auto/XSTools/PathFinding/PathFinding.c"
	{
	    SV * RETVALSV;
	    RETVALSV = sv_newmortal();
	    sv_setref_pv(RETVALSV, "PathFinding",
	    (void*)RETVAL);
	    ST(0) = RETVALSV;
	}
    }
    XSRETURN(1);
}


XS_EUPXS(XS_PathFinding__reset); /* prototype to pass -Wmissing-prototypes */
XS_EUPXS(XS_PathFinding__reset)
{
    dVAR; dXSARGS;
    if (items != 10)
       croak_xs_usage(cv,  "session, map, weights, width, height, startx, starty, destx, desty, time_max");
    {
	PathFinding	session;
	SV *	map = ST(1)
;
	SV *	weights = ST(2)
;
	unsigned long	width = (unsigned long)SvUV(ST(3))
;
	unsigned long	height = (unsigned long)SvUV(ST(4))
;
	unsigned short	startx = (unsigned short)SvUV(ST(5))
;
	unsigned short	starty = (unsigned short)SvUV(ST(6))
;
	unsigned short	destx = (unsigned short)SvUV(ST(7))
;
	unsigned short	desty = (unsigned short)SvUV(ST(8))
;
	unsigned int	time_max = (unsigned int)SvUV(ST(9))
;
#line 46 "src/auto/XSTools/PathFinding/PathFinding.xs"
		unsigned char *real_weights = NULL;
		char *real_map = NULL;
		pos *start, *dest;
		session = (PathFinding) 0; /* shut up compiler warning */
#line 231 "src/auto/XSTools/PathFinding/PathFinding.c"

	if (sv_derived_from(ST(0), "PathFinding")) {
		IV tmp = SvIV((SV*)SvRV(ST(0)));
	session = (PathFinding) tmp;
	}
	else
		croak("session is not of type PathFinding")
;
#line 51 "src/auto/XSTools/PathFinding/PathFinding.xs"
		if (session->map_sv)
			SvREFCNT_dec (session->map_sv);
		if (session->weight_sv) {
			SvREFCNT_dec (session->weight_sv);
			session->weight_sv = NULL;
		}

		/* Sanity check the map parameter and get the map data */
		if (map && SvOK (map))
			real_map = (char *) SvPV_nolen (derefPV (map));
		if (!real_map)
			croak("The 'map' parameter must be a valid scalar.\n");

		if (weights && SvOK (weights)) {
			/* Don't use default weights if weights are explictly given */
			STRLEN len;

			real_weights = (unsigned char *) SvPV (derefPV (weights), len);
			if (real_weights && len < 256)
				croak("The 'weight' parameter must be a scalar of 256 bytes, or undef.\n");
		}

		start = (pos *) malloc (sizeof (pos));
		dest = (pos *) malloc (sizeof (pos));
		start->x = startx;
		start->y = starty;
		dest->x = destx;
		dest->y = desty;

		CalcPath_init (session, real_map, real_weights, width, height, start, dest, time_max);

		/* Increase SV reference counts so the data
		   won't be destroyed while we're calculating. */
		session->map_sv = derefPV (map);
		SvREFCNT_inc (session->map_sv);
		if (real_weights != NULL) {
			session->weight_sv = weights;
			SvREFCNT_inc (weights);
		}
#line 280 "src/auto/XSTools/PathFinding/PathFinding.c"
    }
    XSRETURN_EMPTY;
}


XS_EUPXS(XS_PathFinding_run); /* prototype to pass -Wmissing-prototypes */
XS_EUPXS(XS_PathFinding_run)
{
    dVAR; dXSARGS;
    if (items != 2)
       croak_xs_usage(cv,  "session, r_array");
    {
	PathFinding	session;
	SV *	r_array = ST(1)
;
#line 96 "src/auto/XSTools/PathFinding/PathFinding.xs"
		int status;
#line 298 "src/auto/XSTools/PathFinding/PathFinding.c"
	int	RETVAL;
	dXSTARG;

	if (sv_derived_from(ST(0), "PathFinding")) {
		IV tmp = SvIV((SV*)SvRV(ST(0)));
	session = (PathFinding) tmp;
	}
	else
		croak("session is not of type PathFinding")
;
#line 98 "src/auto/XSTools/PathFinding/PathFinding.xs"
		if (!r_array || !SvOK (r_array) || SvTYPE (r_array) != SVt_RV || SvTYPE (SvRV (r_array)) != SVt_PVAV) {
			croak ("PathFinding::run(session, r_array): r_array must be a reference to an array\n");
			XSRETURN_IV (-1);
		}

		status = CalcPath_pathStep (session);
		if (status < 0) {
			RETVAL = -1;

		} else if (status > 0) {
			AV *array;
			int i, size;

			size = session->solution.size;
			array = (AV *) SvRV (r_array);
			if (av_len (array) > size)
				av_clear (array);
			av_extend (array, session->solution.size);

			for (i = 0; i < size; i++) {
				HV *pos = (HV *) sv_2mortal ((SV *) newHV ());
				hv_store (pos, "x", 1, newSViv (session->solution.array[i].x), 0);
				hv_store (pos, "y", 1, newSViv (session->solution.array[i].y), 0);
				av_store (array, size - 1 - i, newRV ((SV *) pos));
			}
			RETVAL = size;

		} else {
			RETVAL = 0;
		}
#line 340 "src/auto/XSTools/PathFinding/PathFinding.c"
	XSprePUSH; PUSHi((IV)RETVAL);
    }
    XSRETURN(1);
}


XS_EUPXS(XS_PathFinding_runref); /* prototype to pass -Wmissing-prototypes */
XS_EUPXS(XS_PathFinding_runref)
{
    dVAR; dXSARGS;
    if (items != 1)
       croak_xs_usage(cv,  "session");
    {
	PathFinding	session;
#line 135 "src/auto/XSTools/PathFinding/PathFinding.xs"
		int status;
#line 357 "src/auto/XSTools/PathFinding/PathFinding.c"
	SV *	RETVAL;

	if (sv_derived_from(ST(0), "PathFinding")) {
		IV tmp = SvIV((SV*)SvRV(ST(0)));
	session = (PathFinding) tmp;
	}
	else
		croak("session is not of type PathFinding")
;
#line 137 "src/auto/XSTools/PathFinding/PathFinding.xs"
		status = CalcPath_pathStep (session);
		if (status < 0) {
			XSRETURN_UNDEF;

		} else if (status > 0) {
			AV * results;
			int i;

			results = (AV *)sv_2mortal((SV *)newAV());
			av_extend(results, session->solution.size);
			for (i = session->solution.size - 1; i >= 0; i--) {
				HV * rh = (HV *)sv_2mortal((SV *)newHV());

				hv_store(rh, "x", 1, newSViv(session->solution.array[i].x), 0);
				hv_store(rh, "y", 1, newSViv(session->solution.array[i].y), 0);

				av_push(results, newRV((SV *)rh));
			}
			RETVAL = newRV((SV *)results);

		} else {
			XSRETURN_NO;
		}
#line 391 "src/auto/XSTools/PathFinding/PathFinding.c"
	RETVAL = sv_2mortal(RETVAL);
	ST(0) = RETVAL;
    }
    XSRETURN(1);
}


XS_EUPXS(XS_PathFinding_runstr); /* prototype to pass -Wmissing-prototypes */
XS_EUPXS(XS_PathFinding_runstr)
{
    dVAR; dXSARGS;
    if (items != 1)
       croak_xs_usage(cv,  "session");
    {
	PathFinding	session;
#line 167 "src/auto/XSTools/PathFinding/PathFinding.xs"
		int status;
#line 409 "src/auto/XSTools/PathFinding/PathFinding.c"
	SV *	RETVAL;

	if (sv_derived_from(ST(0), "PathFinding")) {
		IV tmp = SvIV((SV*)SvRV(ST(0)));
	session = (PathFinding) tmp;
	}
	else
		croak("session is not of type PathFinding")
;
#line 169 "src/auto/XSTools/PathFinding/PathFinding.xs"
		status = CalcPath_pathStep (session);
		if (status < 0) {
			XSRETURN_UNDEF;
		} else if (status > 0) {
			RETVAL = newSVpvn((char *)&session->solution.array, session->solution.size * sizeof(pos));
		} else {
			XSRETURN_IV (0);
		}
#line 428 "src/auto/XSTools/PathFinding/PathFinding.c"
	RETVAL = sv_2mortal(RETVAL);
	ST(0) = RETVAL;
    }
    XSRETURN(1);
}


XS_EUPXS(XS_PathFinding_runcount); /* prototype to pass -Wmissing-prototypes */
XS_EUPXS(XS_PathFinding_runcount)
{
    dVAR; dXSARGS;
    if (items != 1)
       croak_xs_usage(cv,  "session");
    {
	PathFinding	session;
#line 184 "src/auto/XSTools/PathFinding/PathFinding.xs"
		int status;
#line 446 "src/auto/XSTools/PathFinding/PathFinding.c"
	int	RETVAL;
	dXSTARG;

	if (sv_derived_from(ST(0), "PathFinding")) {
		IV tmp = SvIV((SV*)SvRV(ST(0)));
	session = (PathFinding) tmp;
	}
	else
		croak("session is not of type PathFinding")
;
#line 186 "src/auto/XSTools/PathFinding/PathFinding.xs"
		status = CalcPath_pathStep (session);
		if (status < 0)
			RETVAL = -1;
		else if (status > 0)
			RETVAL = (int) session->solution.size;
		else
			RETVAL = 0;
#line 465 "src/auto/XSTools/PathFinding/PathFinding.c"
	XSprePUSH; PUSHi((IV)RETVAL);
    }
    XSRETURN(1);
}


XS_EUPXS(XS_PathFinding_DESTROY); /* prototype to pass -Wmissing-prototypes */
XS_EUPXS(XS_PathFinding_DESTROY)
{
    dVAR; dXSARGS;
    if (items != 1)
       croak_xs_usage(cv,  "session");
    {
	PathFinding	session;
#line 200 "src/auto/XSTools/PathFinding/PathFinding.xs"
		session = (PathFinding) 0; /* shut up compiler warning */
#line 482 "src/auto/XSTools/PathFinding/PathFinding.c"

	if (sv_derived_from(ST(0), "PathFinding")) {
		IV tmp = SvIV((SV*)SvRV(ST(0)));
	session = (PathFinding) tmp;
	}
	else
		croak("session is not of type PathFinding")
;
#line 202 "src/auto/XSTools/PathFinding/PathFinding.xs"
		if (session->map_sv)
			SvREFCNT_dec (session->map_sv);
		if (session->weight_sv)
			SvREFCNT_dec (session->weight_sv);
		CalcPath_destroy (session);
#line 497 "src/auto/XSTools/PathFinding/PathFinding.c"
    }
    XSRETURN_EMPTY;
}

#ifdef __cplusplus
extern "C"
#endif
XS_EXTERNAL(boot_PathFinding); /* prototype to pass -Wmissing-prototypes */
XS_EXTERNAL(boot_PathFinding)
{
#if PERL_VERSION_LE(5, 21, 5)
    dVAR; dXSARGS;
#else
    dVAR; dXSBOOTARGSXSAPIVERCHK;
#endif
#if (PERL_REVISION == 5 && PERL_VERSION < 9)
    char* file = __FILE__;
#else
    const char* file = __FILE__;
#endif

    PERL_UNUSED_VAR(file);

    PERL_UNUSED_VAR(cv); /* -W */
    PERL_UNUSED_VAR(items); /* -W */
#if PERL_VERSION_LE(5, 21, 5)
    XS_VERSION_BOOTCHECK;
#  ifdef XS_APIVERSION_BOOTCHECK
    XS_APIVERSION_BOOTCHECK;
#  endif
#endif

        (void)newXSproto_portable("PathFinding::create", XS_PathFinding_create, file, "");
        (void)newXSproto_portable("PathFinding::_reset", XS_PathFinding__reset, file, "$$$$$$$$$$");
        (void)newXSproto_portable("PathFinding::run", XS_PathFinding_run, file, "$$");
        (void)newXSproto_portable("PathFinding::runref", XS_PathFinding_runref, file, "$");
        (void)newXSproto_portable("PathFinding::runstr", XS_PathFinding_runstr, file, "$");
        (void)newXSproto_portable("PathFinding::runcount", XS_PathFinding_runcount, file, "$");
        (void)newXSproto_portable("PathFinding::DESTROY", XS_PathFinding_DESTROY, file, "$");
#if PERL_VERSION_LE(5, 21, 5)
#  if PERL_VERSION_GE(5, 9, 0)
    if (PL_unitcheckav)
        call_list(PL_scopestack_ix, PL_unitcheckav);
#  endif
    XSRETURN_YES;
#else
    Perl_xs_boot_epilog(aTHX_ ax);
#endif
}

